# import Web from "../database/schema.graphql"
# import WebEdge from "../database/schema.graphql"
# import WebConnection from "../database/schema.graphql"

# http://graphql.org/learn/best-practices/#versioning
# http://graphql.org/learn/best-practices/#nullability
# https://medium.com/@calebmer/when-to-use-graphql-non-null-fields-4059337f6fc8
# http://graphql.org/learn/schema/
# tl;dr Use non-nullable only when you are sure API will never change.

# Workflow:
#   - update model.graphql
#   - add resolver
#   - test it in playground
#   - run `yarn schema-relay` in another terminal window
#   - restart `yarn dev` in first terminal window
# TODO: Ideally, run `yarn schema-relay` after nodemon.api.json restart
# invoked by model.graphql change. PR anyone?

# Like database/model User, but without password, webs, and directives.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  themeName: String
}

# Note Payloads are nullable, because mutation can fail.

type AuthPayload {
  token: String!
  user: User!
}

type CreateWebPayload {
  edge: WebEdge
}

type DeleteWebPayload {
  id: ID
}

type UpdateUserPayload {
  user: User
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  signin(email: String!, password: String!): AuthPayload
  createWeb(name: String!): CreateWebPayload
  deleteWeb(id: ID!): DeleteWebPayload
  updateUser(themeName: String!): UpdateUserPayload
}

type Query {
  me: User
  # Expose only API we need, webs of logged-in user for now.
  # Later, we can extend API for any user.
  # webs(first: Int!, ownerId: ID!): WebConnection
  webs(first: Int!): WebConnection
  web(domain: String!): Web
}
